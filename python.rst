.. SimpleUI documentation master file, created by
   sphinx-quickstart on Sat May 16 14:23:51 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Python в обработчиках
=======================

Приложения Simple UI могут использовать интерпретатор Python для выполнения кода обработчиков  в любом режиме. Можно писать код обработчиков используя процедуры, классы, библиотеки. Перечень библиотек и актуальная версия интерпретатора может меняться от релиза к релизу и информация об этом будет обновляться.

На текущий момент используется:

 *  Версия Python - 3.8


Подключены библиотеки:


 *  Стандартные библиотеки
 *  Requests
 *  Lxml
 *  Pandas
 *  BeautifulSoup
 *  pony
 *  Pillow
 *  Jinja2
 *  python-barcode


.. note:: Apk по умолчанию не включает поддержку режима x_86 поэтому не будет выполняться в эмуляторе на ПК. Если нужен такой режим – обращайтесь за отдельной версией (изза большого размера не включается в стандартную поставку)

Обработчики Python для экранов "При запуске" и "Обработка ввода" могут выполняться совместно с обработчиками закладки «Offline&Rest» и обработчиками сервиса онлайн (1С) на экранах в последовательности: 1) Python 2) Offline&REST 3) 1С


Кроме того предусмотрены отдельные общие виды обработчиков: 

 *  При запуске конфигурации
 *  По расписанию - общий обработчик (периодичность задается в настройках). Запускается в сервисе, работает при неактивном приложении.
 *  По настраиваемому расписанию - обработчики на закладке "Произвольные таймеры". Можно добавить любое количество обработчиков по расписанию с периодичностью от 1 мс.
 *  Обработчик ответа в уведомлении
 *  Обработчик фонового сервиса
 *  При получении контента (поделиться, открыть файл) -* пока не документировано, см. демо

Начиная с с версии 7.00 также появился общий модуль (закладка Общий модуль). Можно разместить там свои функции и потом использовать их через import ui_general

Код можно запускать из кода - синхронно (в UI-потоке) и асинхронно (в фоне). Код надо передавать в виде строк Base64:

 *  **RunPy** - запускает синхронное выполнение скрипта Python в UI-потоке приложения. В качестве параметра передается скрипт в виде Base64-строки
 *  **RunPyThread** - запускает асинхронное фоновое выполнение скрипта Python. В качестве параметра передается скрипт в виде Base64-строки

Код обработчиков взаимодействует с данными и интерфейсов Simple UI через:

 *  Переменные (локальные и глобальные переменные, команды в переменных как обычно)
 *  Прямые запросы SQL в СУБД приложения

Все что нужно знать о взаимодействии с переменными, а следовательно и с самим приложением:

 *  Записать в Переменные : hashMap.put(“имя переменной”, значение переменной)
 *  Прочитать из переменных: hashMap.get(“имя переменной”)

Пример кода обработчика на Python:

.. code-block:: Python

  import json
  import requests
  
  r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
  jdata = json.loads(r.text)
  rate =jdata.get("Valute").get("BRL").get("Value")
  #Записываем в Переменные
  hashMap.put("rate",rate)
